/*
 * rum
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */
package fullnode

import (
	"net/http"

	"github.com/lixvyang/rum-sdk-go/sdk/apps"
	"github.com/lixvyang/rum-sdk-go/sdk/base"
	"github.com/lixvyang/rum-sdk-go/sdk/group"
	"github.com/lixvyang/rum-sdk-go/sdk/groups"
)

// APIClient manages communication with the rum API v1.0.0
// In most cases there should be only one, shared, APIClient.
type APIClient struct {
	// API Services

	AppsApi *apps.AppsApiService

	// ChainApi *ChainApiService

	GroupApi *group.GroupApiService

	GroupsApi *groups.GroupsApiService

	// KeystoreApi *KeystoreApiService

	// LightNodeApi *LightNodeApiService

	// ManagementApi *ManagementApiService

	// NodeApi *NodeApiService

	// ToolsApi *ToolsApiService

	// UserApi *UserApiService
}

// NewAPIClient creates a new API client. Requires a userAgent string describing your application.
// optionally a custom http.Client to allow for advanced features such as caching.
func New(cfg *base.Configuration) *APIClient {
	if cfg.HTTPClient == nil {
		cfg.HTTPClient = http.DefaultClient
	}

	c := &APIClient{}
	baseCli := base.New(&base.Configuration{
		BasePath: cfg.BasePath,
	})

	c.AppsApi = apps.New(baseCli)
	c.GroupApi = group.New(baseCli)
	c.GroupsApi = groups.New(baseCli)
	// API Services
	// c.ChainApi = (*ChainApiService)(&c.common)
	// c.KeystoreApi = (*KeystoreApiService)(&c.common)
	// c.LightNodeApi = (*LightNodeApiService)(&c.common)
	// c.ManagementApi = (*ManagementApiService)(&c.common)
	// c.NodeApi = (*NodeApiService)(&c.common)
	// c.ToolsApi = (*ToolsApiService)(&c.common)
	// c.UserApi = (*UserApiService)(&c.common)

	return c
}
