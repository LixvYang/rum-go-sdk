/*
 * rum
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package groups

import (
	_context "context"
	"fmt"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"

	"github.com/lixvyang/rum-sdk-go/sdk/base"
	"github.com/lixvyang/rum-sdk-go/sdk/model"

	"github.com/antihax/optional"
)

func New(service *base.APIClient) *GroupsApiService {
	return &GroupsApiService{service}
}

// Linger please
var (
	_ _context.Context
)

type service struct {
	client *base.APIClient
}

// GroupsApiService GroupsApi service
type GroupsApiService service

// GroupsApiApiV1GroupClearPostOpts Optional parameters for the method 'ApiV1GroupClearPost'
type GroupsApiApiV1GroupClearPostOpts struct {
	HandlersClearGroupDataParam optional.Interface
}

/*
ApiV1GroupClearPost ClearGroupData
Clear group data
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *GroupsApiApiV1GroupClearPostOpts - Optional Parameters:
  - @param "HandlersClearGroupDataParam" (optional.Interface of HandlersClearGroupDataParam) -

@return HandlersClearGroupDataResult
*/
func (a *GroupsApiService) ApiV1GroupClearPost(ctx _context.Context, localVarOptionals *GroupsApiApiV1GroupClearPostOpts) (model.HandlersClearGroupDataResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  model.HandlersClearGroupDataResult
	)

	// create path and map variables
	localVarPath := a.client.Cfg.BasePath + "/api/v1/group/clear"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := base.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := base.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.HandlersClearGroupDataParam.IsSet() {
		localVarOptionalHandlersClearGroupDataParam, localVarOptionalHandlersClearGroupDataParamok := localVarOptionals.HandlersClearGroupDataParam.Value().(model.HandlersClearGroupDataParam)
		if !localVarOptionalHandlersClearGroupDataParamok {
			return localVarReturnValue, nil, base.ReportError("handlersClearGroupDataParam should be HandlersClearGroupDataParam")
		}
		localVarPostBody = &localVarOptionalHandlersClearGroupDataParam
	}

	r, err := a.client.PrepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.CallAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := base.GenericOpenAPIError{
			Msg: localVarBody,
			Err: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := base.GenericOpenAPIError{
			Msg: localVarBody,
			Err: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GroupsApiApiV1GroupGroupIdContentPostOpts Optional parameters for the method 'ApiV1GroupGroupIdContentPost'
type GroupsApiApiV1GroupGroupIdContentPostOpts struct {
	HandlersPostToGroupParam optional.Interface
}

/*
ApiV1GroupGroupIdContentPost PostToGroup
Post object to a group
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param groupId Group Id
  - @param optional nil or *GroupsApiApiV1GroupGroupIdContentPostOpts - Optional Parameters:
  - @param "HandlersPostToGroupParam" (optional.Interface of HandlersPostToGroupParam) -

@return model.HandlersTrxResult
*/
func (a *GroupsApiService) ApiV1GroupGroupIdContentPost(ctx _context.Context, groupId string, localVarOptionals *GroupsApiApiV1GroupGroupIdContentPostOpts) (model.HandlersTrxResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  model.HandlersTrxResult
	)

	// create path and map variables
	localVarPath := a.client.Cfg.BasePath + "/api/v1/group/{group_id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"group_id"+"}", _neturl.QueryEscape(base.ParameterToString(groupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := base.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := base.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	fmt.Println(localVarOptionals.HandlersPostToGroupParam.Value().(model.HandlersPostToGroupParam))
	// body params
	if localVarOptionals != nil && localVarOptionals.HandlersPostToGroupParam.IsSet() {
		localVarOptionalHandlersPostToGroupParam, localVarOptionalHandlersPostToGroupParamok := localVarOptionals.HandlersPostToGroupParam.Value().(model.HandlersPostToGroupParam)
		if !localVarOptionalHandlersPostToGroupParamok {
			return localVarReturnValue, nil, base.ReportError("handlersPostToGroupParam should be HandlersPostToGroupParam")
		}
		localVarPostBody = &localVarOptionalHandlersPostToGroupParam
	}

	r, err := a.client.PrepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.CallAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := base.GenericOpenAPIError{
			Msg: localVarBody,
			Err: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := base.GenericOpenAPIError{
			Msg: localVarBody,
			Err: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
ApiV1GroupGroupIdGet GetGroupById
Get the joined group by group id
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param groupId Group Id

@return ApiGroupInfo
*/
func (a *GroupsApiService) ApiV1GroupGroupIdGet(ctx _context.Context, groupId string) (model.ApiGroupInfo, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  model.ApiGroupInfo
	)

	// create path and map variables
	localVarPath := a.client.Cfg.BasePath + "/api/v1/group/{group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group_id"+"}", _neturl.QueryEscape(base.ParameterToString(groupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := base.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := base.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.PrepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.CallAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := base.GenericOpenAPIError{
			Msg: localVarBody,
			Err: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := base.GenericOpenAPIError{
			Msg: localVarBody,
			Err: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GroupsApiApiV1GroupGroupIdSeedGetOpts Optional parameters for the method 'ApiV1GroupGroupIdSeedGet'
type GroupsApiApiV1GroupGroupIdSeedGetOpts struct {
	IncludeChainUrl optional.String
}

/*
ApiV1GroupGroupIdSeedGet Get group seed
get group seed from appdb
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param groupId Group Id
  - @param optional nil or *GroupsApiApiV1GroupGroupIdSeedGetOpts - Optional Parameters:
  - @param "IncludeChainUrl" (optional.String) -  if include chain url

@return HandlersGetGroupSeedResult
*/
func (a *GroupsApiService) ApiV1GroupGroupIdSeedGet(ctx _context.Context, groupId string, localVarOptionals *GroupsApiApiV1GroupGroupIdSeedGetOpts) (model.HandlersGetGroupSeedResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  model.HandlersGetGroupSeedResult
	)

	// create path and map variables
	localVarPath := a.client.Cfg.BasePath + "/api/v1/group/{group_id}/seed"
	localVarPath = strings.Replace(localVarPath, "{"+"group_id"+"}", _neturl.QueryEscape(base.ParameterToString(groupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.IncludeChainUrl.IsSet() {
		localVarQueryParams.Add("include_chain_url", base.ParameterToString(localVarOptionals.IncludeChainUrl.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := base.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := base.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.PrepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.CallAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := base.GenericOpenAPIError{
			Msg: localVarBody,
			Err: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := base.GenericOpenAPIError{
			Msg: localVarBody,
			Err: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GroupsApiApiV1GroupLeavePostOpts Optional parameters for the method 'ApiV1GroupLeavePost'
type GroupsApiApiV1GroupLeavePostOpts struct {
	HandlersLeaveGroupParam optional.Interface
}

/*
ApiV1GroupLeavePost LeaveGroup
Leave a new group
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *GroupsApiApiV1GroupLeavePostOpts - Optional Parameters:
  - @param "HandlersLeaveGroupParam" (optional.Interface of HandlersLeaveGroupParam) -

@return HandlersLeaveGroupResult
*/
func (a *GroupsApiService) ApiV1GroupLeavePost(ctx _context.Context, localVarOptionals *GroupsApiApiV1GroupLeavePostOpts) (model.HandlersLeaveGroupResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  model.HandlersLeaveGroupResult
	)

	// create path and map variables
	localVarPath := a.client.Cfg.BasePath + "/api/v1/group/leave"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := base.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := base.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.HandlersLeaveGroupParam.IsSet() {
		localVarOptionalHandlersLeaveGroupParam, localVarOptionalHandlersLeaveGroupParamok := localVarOptionals.HandlersLeaveGroupParam.Value().(model.HandlersLeaveGroupParam)
		if !localVarOptionalHandlersLeaveGroupParamok {
			return localVarReturnValue, nil, base.ReportError("handlersLeaveGroupParam should be HandlersLeaveGroupParam")
		}
		localVarPostBody = &localVarOptionalHandlersLeaveGroupParam
	}

	r, err := a.client.PrepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.CallAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := base.GenericOpenAPIError{
			Msg: localVarBody,
			Err: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := base.GenericOpenAPIError{
			Msg: localVarBody,
			Err: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GroupsApiApiV1GroupPostOpts Optional parameters for the method 'ApiV1GroupPost'
type GroupsApiApiV1GroupPostOpts struct {
	HandlersCreateGroupParam optional.Interface
}

/*
ApiV1GroupPost CreateGroupUrl
Create a new group
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *GroupsApiApiV1GroupPostOpts - Optional Parameters:
  - @param "HandlersCreateGroupParam" (optional.Interface of HandlersCreateGroupParam) -

@return HandlersCreateGroupResult
*/
func (a *GroupsApiService) ApiV1GroupPost(ctx _context.Context, localVarOptionals *GroupsApiApiV1GroupPostOpts) (model.HandlersCreateGroupResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  model.HandlersCreateGroupResult
	)

	// create path and map variables
	localVarPath := a.client.Cfg.BasePath + "/api/v1/group"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := base.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := base.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.HandlersCreateGroupParam.IsSet() {
		localVarOptionalHandlersCreateGroupParam, localVarOptionalHandlersCreateGroupParamok := localVarOptionals.HandlersCreateGroupParam.Value().(model.HandlersCreateGroupParam)
		if !localVarOptionalHandlersCreateGroupParamok {
			return localVarReturnValue, nil, base.ReportError("handlersCreateGroupParam should be HandlersCreateGroupParam")
		}
		localVarPostBody = &localVarOptionalHandlersCreateGroupParam
	}

	r, err := a.client.PrepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.CallAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := base.GenericOpenAPIError{
			Msg: localVarBody,
			Err: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := base.GenericOpenAPIError{
			Msg: localVarBody,
			Err: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
ApiV1GroupsGet GetGroups
Get all joined groups
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return ApiGroupInfoList
*/
func (a *GroupsApiService) ApiV1GroupsGet(ctx _context.Context) (model.ApiGroupInfoList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  model.ApiGroupInfoList
	)

	// create path and map variables
	localVarPath := a.client.Cfg.BasePath + "/api/v1/groups"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := base.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := base.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.PrepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.CallAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := base.GenericOpenAPIError{
			Msg: localVarBody,
			Err: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := base.GenericOpenAPIError{
			Msg: localVarBody,
			Err: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GroupsApiApiV2GroupJoinPostOpts Optional parameters for the method 'ApiV2GroupJoinPost'
type GroupsApiApiV2GroupJoinPostOpts struct {
	HandlersJoinGroupParamV2 optional.Interface
}

/*
ApiV2GroupJoinPost JoinGroup
Join a group
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *GroupsApiApiV2GroupJoinPostOpts - Optional Parameters:
  - @param "HandlersJoinGroupParamV2" (optional.Interface of HandlersJoinGroupParamV2) -

@return ApiJoinGroupResult
*/
func (a *GroupsApiService) ApiV2GroupJoinPost(ctx _context.Context, localVarOptionals *GroupsApiApiV2GroupJoinPostOpts) (model.ApiJoinGroupResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  model.ApiJoinGroupResult
	)

	// create path and map variables
	localVarPath := a.client.Cfg.BasePath + "/api/v2/group/join"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := base.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := base.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.HandlersJoinGroupParamV2.IsSet() {
		localVarOptionalHandlersJoinGroupParamV2, localVarOptionalHandlersJoinGroupParamV2ok := localVarOptionals.HandlersJoinGroupParamV2.Value().(model.HandlersJoinGroupParamV2)
		if !localVarOptionalHandlersJoinGroupParamV2ok {
			return localVarReturnValue, nil, base.ReportError("handlersJoinGroupParamV2 should be HandlersJoinGroupParamV2")
		}
		localVarPostBody = &localVarOptionalHandlersJoinGroupParamV2
	}

	r, err := a.client.PrepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.CallAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := base.GenericOpenAPIError{
			Msg: localVarBody,
			Err: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := base.GenericOpenAPIError{
			Msg: localVarBody,
			Err: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
